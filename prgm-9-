import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import‚ê£accuracy_score,classification_report,confusion_matrix
import matplotlib.pyplot as plt
x=np.load('olivetti_faces.npy')
y=np.load('olivetti_faces_target.npy')
num_classes=len(np.unique(y))
pd.Series(y).value_counts().sort_index()
x.shape
y.shape

x=x.reshape((x.shape[0],-1))
x.shape
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)

gnb=GaussianNB()
gnb.fit(x_train,y_train)

y_pred=gnb.predict(x_test)

accuracy=accuracy_score(y_test,y_pred)
print(f'Accuracy:{accuracy*100:.2F}%')

print(classification_report(y_test,y_pred,zero_division=1))

print("\nConfusion Matrix:")
print(confusion_matrix(y_test,y_pred))

cross_val_accuracy=cross_val_score(gnb,x,y,cv=5,scoring='accuracy')
print(f'cross_validation_accuaracy:{cross_val_accuracy.mean()*100:.2f}%')

fig,axis=plt.subplots(3,5,figsize=(12,8))
for ax,image,label,prediction in zip(axis.ravel(),x_test,y_test,y_pred):
  ax.imshow(image.reshape(64,64),cmap=plt.cm.gray)
  ax.set_title(f"True:{label},Pred={prediction}")
  ax.axis('off')
plt.show() 
